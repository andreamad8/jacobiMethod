/* We tried the following business logic
*/
float sum = 0.0;
for (size_t j = 0; j < N; j++) {
  sum = sum + R[i][j] * x1[j];
}
x2[i] = (b[i] - sum) / D[i];
/// SER
//XEON
// LOOP BEGIN at src/jacobiser.cpp(115,9)
//    remark #15389: vectorization support: reference R.__b_St12_Vector_baseISt6vectorIfSaIfEESaIS2_EE._M_impl._M_start has unaligned access   [ src/jacobiser.cpp(116,11) ]
//    remark #15388: vectorization support: reference x1.__b_St12_Vector_baseIfSaIfEE._M_impl._M_start has aligned access   [ src/jacobiser.cpp(116,11) ]
//    remark #15388: vectorization support: reference R.__b_St12_Vector_baseISt6vectorIfSaIfEESaIS2_EE._M_impl._M_start has aligned access   [ src/jacobiser.cpp(116,11) ]
//    remark #15388: vectorization support: reference x1.__b_St12_Vector_baseIfSaIfEE._M_impl._M_start has aligned access   [ src/jacobiser.cpp(116,11) ]
//    remark #15381: vectorization support: unaligned access used inside loop body
//    remark #15305: vectorization support: vector length 4
//    remark #15399: vectorization support: unroll factor set to 2
//    remark #15309: vectorization support: normalized vectorization overhead 2.412
//    remark #15300: LOOP WAS VECTORIZED
//    remark #15442: entire loop may be executed in remainder
//    remark #15448: unmasked aligned unit stride loads: 2
//    remark #15450: unmasked unaligned unit stride loads: 1
//    remark #15475: --- begin vector loop cost summary ---
//    remark #15476: scalar loop cost: 26
//    remark #15477: vector loop cost: 4.250
//    remark #15478: estimated potential speedup: 5.400
//    remark #15488: --- end vector loop cost summary ---



/// THREAD
// PHI
// XEON
// LOOP BEGIN at src/jacobiPar.cpp(103,7)
//    remark #25084: Preprocess Loopnests: Moving Out Store    [
//    src/jacobiPar.cpp(104,9) ]
//    remark #15388: vectorization support: reference (unknown) has aligned
//    access   [ src/jacobiPar.cpp(104,9) ]
//    remark #15388: vectorization support: reference (unknown) has aligned
//    access   [ src/jacobiPar.cpp(104,9) ]
//    remark #15305: vectorization support: vector length 4
//    remark #15399: vectorization support: unroll factor set to 2
//    remark #15309: vectorization support: normalized vectorization overhead
//    3.000
//    remark #15300: LOOP WAS VECTORIZED
//    remark #15442: entire loop may be executed in remainder
//    remark #15448: unmasked aligned unit stride loads: 2
//    remark #15475: --- begin vector loop cost summary ---
//    remark #15476: scalar loop cost: 12
//    remark #15477: vector loop cost: 2.000
//    remark #15478: estimated potential speedup: 5.230
//    remark #15488: --- end vector loop cost summary ---

// LOOP BEGIN at src/jacobiPar.cpp(111,5)
//    remark #25084: Preprocess Loopnests: Moving Out Store    [ src/jacobiPar.cpp(112,7) ]
//    remark #15388: vectorization support: reference (unknown) has aligned access   [ src/jacobiPar.cpp(112,7) ]
//    remark #15388: vectorization support: reference (unknown) has aligned access   [ src/jacobiPar.cpp(112,7) ]
//    remark #15388: vectorization support: reference (unknown) has aligned access   [ src/jacobiPar.cpp(112,7) ]
//    remark #15388: vectorization support: reference (unknown) has aligned access   [ src/jacobiPar.cpp(112,7) ]
//    remark #15305: vectorization support: vector length 4
//    remark #15399: vectorization support: unroll factor set to 2
//    remark #15309: vectorization support: normalized vectorization overhead 1.875
//    remark #15300: LOOP WAS VECTORIZED
//    remark #15442: entire loop may be executed in remainder
//    remark #15448: unmasked aligned unit stride loads: 2
//    remark #15475: --- begin vector loop cost summary ---
//    remark #15476: scalar loop cost: 16
//    remark #15477: vector loop cost: 3.000
//    remark #15478: estimated potential speedup: 4.810
//    remark #15488: --- end vector loop cost summary ---
// LOOP END

/// FASTFLOW

// PHI
// XEON
// LOOP BEGIN at src/jacobiFor.cpp(122,27) inlined into
// src/jacobiFor.cpp(119,12)
//    remark #15388: vectorization support: reference U219_V has aligned access
//    [ src/jacobiFor.cpp(123,29) ]
//    remark #15388: vectorization support: reference U219_V has aligned access
//    [ src/jacobiFor.cpp(123,29) ]
//    remark #15305: vectorization support: vector length 4
//    remark #15399: vectorization support: unroll factor set to 2
//    remark #15309: vectorization support: normalized vectorization overhead
//    3.000
//    remark #15300: LOOP WAS VECTORIZED
//    remark #15442: entire loop may be executed in remainder
//    remark #15448: unmasked aligned unit stride loads: 2
//    remark #15475: --- begin vector loop cost summary ---
//    remark #15476: scalar loop cost: 12
//    remark #15477: vector loop cost: 2.000
//    remark #15478: estimated potential speedup: 5.230
//    remark #15488: --- end vector loop cost summary ---
// LOOP BEGIN at /home/spm1501/public/fastflow/ff/parallel_for.hpp(628,9)
// inlined into src/jacobiFor.cpp(132,12)
//    remark #15305: vectorization support: vector length 2
//    remark #15399: vectorization support: unroll factor set to 4
//    remark #15309: vectorization support: normalized vectorization overhead
//    0.262
//    remark #15417: vectorization support: number of FP up converts: single
//    precision to double precision 1   [ /usr/include/c++/4.4.7/cmath(390,14) ]
//    remark #15417: vectorization support: number of FP up converts: single
//    precision to double precision 1   [ src/jacobiFor.cpp(131,20) ]
//    remark #15418: vectorization support: number of FP down converts: double
//    precision to single precision 1   [ src/jacobiFor.cpp(131,20) ]
//    remark #15300: LOOP WAS VECTORIZED
//    remark #15460: masked strided loads: 2
//    remark #15475: --- begin vector loop cost summary ---
//    remark #15476: scalar loop cost: 18
//    remark #15477: vector loop cost: 10.000
//    remark #15478: estimated potential speedup: 1.760
//    remark #15487: type converts: 3
//    remark #15488: --- end vector loop cost summary ---
// LOOP END
